##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/jinja2/ext.py 1753141474 31875

.pprint: Never

.re: Never

.t: Never

.___v_desugar_1 = pyimport "__init__"
.__init__ = pyimport "__init__"
.Markup: {markupsafe.Markup}
.___v_desugar_2 = pyimport "__init__"

.defaults: Never
.___v_desugar_3 = pyimport "__init__"

.nodes: Never
.___v_desugar_4 = pyimport "environment"
.environment = pyimport "environment"
.Environment: Never
.___v_desugar_5 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.TemplateAssertionError: {exceptions.TemplateAssertionError}
.___v_desugar_6 = pyimport "exceptions"

.TemplateSyntaxError: {exceptions.TemplateSyntaxError}
.___v_desugar_7 = pyimport "runtime"
.runtime = pyimport "runtime"
.concat: Never
.___v_desugar_8 = pyimport "runtime"

.Context: Never
.___v_desugar_9 = pyimport "runtime"

.Undefined: {runtime.Undefined}
.___v_desugar_10 = pyimport "utils"
.utils = pyimport "utils"
.import_string: (import_name: Str, silent: Bool := Bool and Bool) -> Never
.___v_desugar_11 = pyimport "utils"

.pass_context: (f: Obj) -> Never

.te = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"

.___v_desugar_12 = pyimport "lexer"
.lexer = pyimport "lexer"
.Token: {lexer.Token}
.___v_desugar_13 = pyimport "lexer"

.TokenStream: {lexer.TokenStream}
.___v_desugar_14 = pyimport "parser"
.parser = pyimport "parser"
.Parser: Never
.Type__TranslationsBasic: ClassType
.Type__TranslationsBasic <: Never
.Type__TranslationsBasic.gettext: (self: ext.Type__TranslationsBasic, message: Str) -> Str
.Type__TranslationsBasic.ngettext: (self: ext.Type__TranslationsBasic, singular: Str, plural: Str, n: Int) -> Str

.Type__TranslationsContext: ClassType
ext = pyimport "ext"
.Type__TranslationsContext <: .Type__TranslationsBasic
.Type__TranslationsContext.pgettext: (self: ext.Type__TranslationsContext, context: Str, message: Str) -> Str
.Type__TranslationsContext.npgettext: (self: ext.Type__TranslationsContext, context: Str, singular: Str, plural: Str, n: Int) -> Str

._SupportedTranslations: Never


.GETTEXT_FUNCTIONS: {Type_v_global_57834: global::Tuple([Str, Str, Str, Str, Str]) | Type_v_global_57834 == ("_", "gettext", "ngettext", "pgettext", "npgettext")}
._ws_re: Never
.Extension: ClassType
.Extension.environment: Never
.Extension.identifier: Never
.Extension.__call__: (environment: Obj) -> ext.Extension
.Extension.__init_subclass__: |Type_71649: Type, Type_71496 <: Structural({.__name__ = ?71652; .identifier = ?O; .__module__ = ?71649}), O: Type, Type_71652: Type|(cls: Type_71496) -> NoneType
.Extension.tags: Never
.Extension.priority: {100}
.Extension.bind: (self: ext.Extension, environment: Obj) -> Never
.Extension.preprocess: (self: ext.Extension, source: Str, name: Obj, filename: Obj := Obj) -> Str
.Extension.filter_stream: (self: ext.Extension, stream: lexer.TokenStream) -> lexer.TokenStream
.Extension.parse: (self: ext.Extension, parser: Obj) -> Never
.Extension.attr: (self: ext.Extension, name: Str, lineno: Obj := Obj) -> Never
.Extension.call_method: (self: ext.Extension, name: Str, args: Obj := Obj, kwargs: Obj := Obj, dyn_args: Obj := Obj, dyn_kwargs: Obj := Obj, lineno: Obj := Obj) -> Never

._gettext_alias: (__context: Obj, *args: Obj, **kwargs := Obj) -> Never
._make_new_gettext: (func: Obj) -> (__context: Never, __string: Str, **variables := Never) -> Str
._make_new_ngettext: (func: Obj) -> (__context: Never, __singular: Str, __plural: Str, __num: Int, **variables := Never) -> Str
._make_new_pgettext: (func: Obj) -> (__context: Never, __string_ctx: Str, __string: Str, **variables := Never) -> Str
._make_new_npgettext: (func: Obj) -> (__context: Never, __string_ctx: Str, __singular: Str, __plural: Str, __num: Int, **variables := Never) -> Str
.InternationalizationExtension: ClassType
.InternationalizationExtension <: .Extension
.InternationalizationExtension.__call__: (environment: Obj) -> ext.InternationalizationExtension
.InternationalizationExtension.tags: global::Set!({"trans"}, _: Nat)
.InternationalizationExtension._install: (self: ext.InternationalizationExtension, translations: Obj, newstyle: Obj := Obj) -> NoneType
.InternationalizationExtension._install_null: (self: ext.InternationalizationExtension, newstyle: Obj := Obj) -> NoneType
.InternationalizationExtension._install_callables: (self: ext.InternationalizationExtension, gettext: Obj, ngettext: Obj, newstyle: Obj := Obj, pgettext: Obj := Obj, npgettext: Obj := Obj) -> NoneType
.InternationalizationExtension._uninstall: (self: ext.InternationalizationExtension, translations: Obj) -> NoneType
.InternationalizationExtension._extract: (self: ext.InternationalizationExtension, source: Obj, gettext_functions: Structural({.__contains__ = (self: Never, Obj) -> Bool}) := Structural({.__contains__ = (self: Never, Obj) -> Bool})) -> NoneType
.InternationalizationExtension.parse: (self: ext.InternationalizationExtension, parser: Obj) -> Never
.InternationalizationExtension._trim_whitespace: |Type_71556 <: Structural({.sub = (self: Obj, ?72178, ?72179) -> ?72180}), Type_72178: Type, Type_72180: Type, Type_71556 <: Structural({.sub = (self: Type_71556, ?72178, ?72179) -> ?72180}), Type_72179: Type|(self: ext.InternationalizationExtension, string: Str, _ws_re: Type_71556 := Type_71556 and Type_71556) -> Str
.InternationalizationExtension._parse_block: (self: ext.InternationalizationExtension, parser: Obj, allow_pluralize: Bool) -> global::Tuple([global::List!(Never, 1), Never])
.InternationalizationExtension._make_node: |Type_71563 <: Structural({.items = (self: Obj) -> ?72395}), Type_72395: Type|(self: ext.InternationalizationExtension, singular: Str, plural: Never, context: Obj, variables: Type_71563, plural_expr: Obj, vars_referenced: Bool, num_called_num: Bool) -> Never

.ExprStmtExtension: ClassType
.ExprStmtExtension <: .Extension
.ExprStmtExtension.tags: global::Set!({"do"}, _: Nat)
.ExprStmtExtension.parse: (self: ext.ExprStmtExtension, parser: Obj) -> Never

.LoopControlExtension: ClassType
.LoopControlExtension <: .Extension
.LoopControlExtension.tags: global::Set!({"break", "continue"}, _: Nat)
.LoopControlExtension.parse: (self: ext.LoopControlExtension, parser: Obj) -> Never

.DebugExtension: ClassType
.DebugExtension <: .Extension
.DebugExtension.tags: global::Set!({"debug"}, _: Nat)
.DebugExtension.parse: (self: ext.DebugExtension, parser: Obj) -> Never
.DebugExtension._render: (self: ext.DebugExtension, context: Obj) -> Str

.extract_from_ast: (ast: Obj, gettext_functions: Structural({.__contains__ = (self: Never, Obj) -> Bool}) := {Type_v_global_57834: global::Tuple([Str, Str, Str, Str, Str]) | Type_v_global_57834 == ("_", "gettext", "ngettext", "pgettext", "npgettext")} and Structural({.__contains__ = (self: Never, Obj) -> Bool}), babel_style: Bool := {True} and Bool) -> NoneType
.Type__CommentFinder: ClassType
.Type__CommentFinder.comment_tags: Never
.Type__CommentFinder.offset: Never
.Type__CommentFinder.last_lineno: Never
.Type__CommentFinder.tokens: Never
.Type__CommentFinder.__call__: (tokens: Obj, comment_tags: Obj) -> ext.Type__CommentFinder
.Type__CommentFinder.find_backwards: (self: ext.Type__CommentFinder, offset: Int) -> Never
.Type__CommentFinder.find_comments: (self: ext.Type__CommentFinder, lineno: Int) -> Never

.babel_extract: |Type_71584 <: Structural({.__contains__ = (self: Never, ?R) -> Bool and (self: Never, ?R) -> Bool}), R: Type|(fileobj: Obj, keywords: Type_71584, comment_tags: Obj, options: global::Indexable(Obj, Never) or global::List(Never, _: Nat) or global::GenericDict) -> NoneType
.i18n: {ext.InternationalizationExtension}
.do: {ext.ExprStmtExtension}
.loopcontrols: {ext.LoopControlExtension}
.debug: {ext.DebugExtension}
