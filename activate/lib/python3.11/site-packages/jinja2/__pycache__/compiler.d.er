##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/jinja2/compiler.py 1753141474 74131

.t: Never

.___v_desugar_1: Never
.contextmanager: Never
.___v_desugar_2: Never
.update_wrapper: Never
.___v_desugar_3: Never
.StringIO: Never
.___v_desugar_4: Never
.chain: Never
.___v_desugar_5: Never
.is_python_keyword: Never
.___v_desugar_6 = pyimport "__init__"
.__init__ = pyimport "__init__"
.escape: (s: Obj) -> Never
.___v_desugar_7 = pyimport "__init__"

.Markup: {markupsafe.Markup}
.___v_desugar_8 = pyimport "__init__"

.nodes: Never
.___v_desugar_9 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.TemplateAssertionError: {exceptions.TemplateAssertionError}
.___v_desugar_10 = pyimport "idtracking"
.idtracking = pyimport "idtracking"
.Symbols: Never
.___v_desugar_11 = pyimport "idtracking"

.VAR_LOAD_ALIAS: Never
.___v_desugar_12 = pyimport "idtracking"

.VAR_LOAD_PARAMETER: Never
.___v_desugar_13 = pyimport "idtracking"

.VAR_LOAD_RESOLVE: Never
.___v_desugar_14 = pyimport "idtracking"

.VAR_LOAD_UNDEFINED: Never
.___v_desugar_15 = pyimport "nodes"
.nodes = pyimport "nodes"
.EvalContext: Never
.___v_desugar_16 = pyimport "optimizer"
.optimizer = pyimport "optimizer"
.Optimizer: Never
.___v_desugar_17 = pyimport "utils"
.utils = pyimport "utils"
._PassArg: ClassType
.___v_desugar_18 = pyimport "utils"

.concat: (self: Str, global::Iterable(Str)) -> Str
.___v_desugar_19 = pyimport "visitor"
.visitor = pyimport "visitor"
.NodeVisitor: Never

.te = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"

.___v_desugar_20 = pyimport "environment"
.environment = pyimport "environment"
.Environment: Never


.F: Never
.operators: global::Dict!({{"ne"}: {"!="}, {"eq"}: {"=="}, {"notin"}: {"not in"}, {"gteq"}: {">="}, {"lteq"}: {"<="}, {"in"}: {"in"}, {"lt"}: {"<"}, {"gt"}: {">"}})
.optimizeconst: (f: Obj) -> Never
._make_binop: (op: Str) -> (self: compiler.CodeGenerator, node: Never, frame: compiler.Frame) -> NoneType
._make_unop: (op: Str) -> (self: compiler.CodeGenerator, node: Never, frame: compiler.Frame) -> NoneType
.generate: (node: Obj, environment: Obj, name: Obj, filename: Obj, stream: Obj := Obj, defer_init: Bool := Bool, optimized: Bool := Bool) -> {None}
.has_safe_repr: (value: Obj) -> Bool
.find_undeclared: (nodes: global::Iterable(Never), names: Obj) -> Never
.MacroRef: ClassType
.MacroRef.accesses_varargs: Never
.MacroRef.accesses_kwargs: Never
.MacroRef.node: Never
.MacroRef.accesses_caller: Never
.MacroRef.__call__: (node: Obj) -> compiler.MacroRef

.Frame: ClassType
.Frame.parent: Never
.Frame.eval_ctx: Never
.Frame.soft_frame: Never
.Frame.rootlevel: Never
.Frame.toplevel: Never
.Frame.block_frame: Never
.Frame.loop_frame: Never
.Frame.__call__: (eval_ctx: Obj, parent: Obj := Obj, level: Obj := Obj) -> compiler.Frame
.Frame.copy: (self: compiler.Frame) -> Never
.Frame.inner: (self: compiler.Frame, isolated: Bool := Bool) -> compiler.Frame
.Frame.soft: (self: compiler.Frame) -> Never
.Frame.__copy__: (self: compiler.Frame) -> Never

.VisitorExit: ClassType
.VisitorExit <: global::RuntimeError

.DependencyFinderVisitor: ClassType
.DependencyFinderVisitor <: Never
.DependencyFinderVisitor.filters: Never
.DependencyFinderVisitor.tests: Never
.DependencyFinderVisitor.__call__: () -> compiler.DependencyFinderVisitor
.DependencyFinderVisitor.visit_Filter: (self: compiler.DependencyFinderVisitor, node: Obj) -> NoneType
.DependencyFinderVisitor.visit_Test: (self: compiler.DependencyFinderVisitor, node: Obj) -> NoneType
.DependencyFinderVisitor.visit_Block: (self: compiler.DependencyFinderVisitor, node: Obj) -> NoneType

.UndeclaredNameVisitor: ClassType
.UndeclaredNameVisitor <: Never
.UndeclaredNameVisitor.names: Never
.UndeclaredNameVisitor.undeclared: Never
.UndeclaredNameVisitor.__call__: (names: Obj) -> compiler.UndeclaredNameVisitor
.UndeclaredNameVisitor.visit_Name: (self: compiler.UndeclaredNameVisitor, node: Obj) -> NoneType
.UndeclaredNameVisitor.visit_Block: (self: compiler.UndeclaredNameVisitor, node: Obj) -> NoneType

.CompilerExit: ClassType
.CompilerExit <: global::Exception

.CodeGenerator: ClassType
.CodeGenerator <: Never
.CodeGenerator.__call__: (environment: Obj, name: Obj, filename: Obj, stream: Obj := Obj, defer_init: Bool := Bool, optimized: Bool := Bool) -> compiler.CodeGenerator
.CodeGenerator.optimized : (self: compiler.CodeGenerator) -> Bool
.CodeGenerator.optimized: Bool
.CodeGenerator.fail: (self: compiler.CodeGenerator, msg: Str, lineno: Int) -> Never
.CodeGenerator.temporary_identifier: (self: compiler.CodeGenerator) -> Str
.CodeGenerator.buffer: (self: compiler.CodeGenerator, frame: compiler.Frame) -> NoneType
.CodeGenerator.return_buffer_contents: (self: compiler.CodeGenerator, frame: compiler.Frame, force_unescaped: Bool := Bool) -> NoneType
.CodeGenerator.indent: (self: compiler.CodeGenerator) -> NoneType
.CodeGenerator.outdent: (self: compiler.CodeGenerator, step: Int := Int and Int) -> NoneType
.CodeGenerator.start_write: (self: compiler.CodeGenerator, frame: compiler.Frame, node: Structural({.lineno = Obj}) := Structural({.lineno = Obj})) -> NoneType
.CodeGenerator.end_write: (self: compiler.CodeGenerator, frame: compiler.Frame) -> NoneType
.CodeGenerator.simple_write: (self: compiler.CodeGenerator, s: Str, frame: compiler.Frame, node: Obj := Obj) -> NoneType
.CodeGenerator.blockvisit: (self: compiler.CodeGenerator, nodes: global::Iterable(Never), frame: compiler.Frame) -> NoneType
.CodeGenerator.write: (self: compiler.CodeGenerator, x: Str) -> NoneType
.CodeGenerator.writeline: |E: Type, Type_55622: Type, Type_55545 <: Structural({.lineno = ?E and ?55622})|(self: compiler.CodeGenerator, x: Str, node: Type_55545 := Type_55545 and Type_55545, extra: Int := Int and Int) -> NoneType
.CodeGenerator.newline: (self: compiler.CodeGenerator, node: Structural({.lineno = Obj}) := Structural({.lineno = Obj}), extra: Int := Int) -> NoneType
.CodeGenerator.signature: |Type_41922 <: Structural({.kwargs = ?55727 and ?55958; .dyn_args = ?55907 and ?55919; .dyn_kwargs = ?55942 and ?56101; .args = ?55710}), Type_55919: Type, Type_55727 <: global::Iterable(?T), T: Type, Type_55710 <: global::Iterable(?T), Type_55958 <: global::Iterable(?T), Type_55942: Type, Type_56101: Type, Type_55907 <: Bool|(self: compiler.CodeGenerator, node: Type_41922, frame: compiler.Frame, extra_kwargs: Obj := Obj) -> NoneType
.CodeGenerator.pull_dependencies: (self: compiler.CodeGenerator, nodes: global::Iterable(Never)) -> NoneType
.CodeGenerator.enter_frame: (self: compiler.CodeGenerator, frame: compiler.Frame) -> NoneType
.CodeGenerator.leave_frame: (self: compiler.CodeGenerator, frame: compiler.Frame, with_python_scope: Bool := Bool) -> NoneType
.CodeGenerator.choose_async: (self: compiler.CodeGenerator, async_value: Str := Str, sync_value: Str := Str) -> Str
.CodeGenerator.func: (self: compiler.CodeGenerator, name: Str) -> Str
.CodeGenerator.macro_body: |Type_56958 <: Int, K: Type, Type_41905 <: global::Iterable(?T), T: Type, Type_56791 <: global::Iterable(?T), V: Type, Type_56912 <: global::Iterable(?T), Self <: global::Indexable(?K, ?V), Type_41550 <: Structural({.body = ?56912 and ?Type_41905; .defaults = ?Self; .lineno = ?56958; .args = ?56791 and ?56941}), Type_56941 <: Structural({.__len__ = (self: Never) -> Nat})|(self: compiler.CodeGenerator, node: Type_41550, frame: compiler.Frame) -> global::Tuple([compiler.Frame, compiler.MacroRef])
.CodeGenerator.macro_def: (self: compiler.CodeGenerator, macro_ref: compiler.MacroRef, frame: compiler.Frame) -> NoneType
.CodeGenerator.position: (self: compiler.CodeGenerator, node: Obj) -> Str
.CodeGenerator.dump_local_context: (self: compiler.CodeGenerator, frame: compiler.Frame) -> Str
.CodeGenerator.write_commons: (self: compiler.CodeGenerator) -> NoneType
.CodeGenerator.push_parameter_definitions: (self: compiler.CodeGenerator, frame: compiler.Frame) -> NoneType
.CodeGenerator.pop_parameter_definitions: (self: compiler.CodeGenerator) -> NoneType
.CodeGenerator.mark_parameter_stored: (self: compiler.CodeGenerator, target: Str) -> NoneType
.CodeGenerator.push_context_reference: (self: compiler.CodeGenerator, target: Str) -> NoneType
.CodeGenerator.pop_context_reference: (self: compiler.CodeGenerator) -> NoneType
.CodeGenerator.get_context_ref: (self: compiler.CodeGenerator) -> Str
.CodeGenerator.get_resolve_func: (self: compiler.CodeGenerator) -> Str
.CodeGenerator.derive_context: (self: compiler.CodeGenerator, frame: compiler.Frame) -> Str
.CodeGenerator.parameter_is_undeclared: (self: compiler.CodeGenerator, target: Str) -> Bool
.CodeGenerator.push_assign_tracking: (self: compiler.CodeGenerator) -> NoneType
.CodeGenerator.pop_assign_tracking: (self: compiler.CodeGenerator, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Template: (self: compiler.CodeGenerator, node: Obj, frame: Obj := Obj) -> NoneType
.CodeGenerator.visit_Block: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Extends: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Include: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator._import_common: |Type_59168: Type, Type_42035 <: Structural({.template = ?59168; .with_context = ?59179}), Type_59179 <: Bool|(self: compiler.CodeGenerator, node: Type_42035, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Import: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_FromImport: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_For: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_If: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Macro: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_CallBlock: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_FilterBlock: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_With: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_ExprStmt: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator._default_finalize: (value: Obj) -> Never
.CodeGenerator._finalize: Never
.CodeGenerator._make_finalize: (self: compiler.CodeGenerator) -> Never
.CodeGenerator._output_const_repr: (self: compiler.CodeGenerator, group: global::Iterable(Str)) -> Str
.CodeGenerator._output_child_to_const: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame, finalize: Obj) -> Str
.CodeGenerator._output_child_pre: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame, finalize: Obj) -> NoneType
.CodeGenerator._output_child_post: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame, finalize: Obj) -> NoneType
.CodeGenerator.visit_Output: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Assign: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_AssignBlock: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Name: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_NSRef: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Const: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_TemplateData: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Tuple: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_List: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Dict: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Add: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Sub: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Mul: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Div: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_FloorDiv: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Pow: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Mod: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_And: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Or: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Pos: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Neg: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Not: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Concat: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Compare: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Operand: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Getattr: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Getitem: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Slice: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator._filter_test_common: |Type_61941: Type, Type_42252 <: Structural({.lineno = ?61941; .name = ?61893 and ?61897}), Type_61897 <: Ref(Obj), Type_61893 <: Ref(Obj)|(self: Never, node: Type_42252, frame: compiler.Frame, is_filter: Bool) -> NoneType or Nat
.CodeGenerator.visit_Filter: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Test: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_CondExpr: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Call: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame, forward_caller: Bool := Bool) -> NoneType
.CodeGenerator.visit_Keyword: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_MarkSafe: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_MarkSafeIfAutoescape: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_EnvironmentAttribute: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_ExtensionAttribute: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_ImportedName: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_InternalName: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_ContextReference: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_DerivedContextReference: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Continue: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Break: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_Scope: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_OverlayScope: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_EvalContextModifier: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType
.CodeGenerator.visit_ScopedEvalContextModifier: (self: compiler.CodeGenerator, node: Obj, frame: compiler.Frame) -> NoneType

