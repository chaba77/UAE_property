##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/requests/utils.py 1753128601 33213

.codecs: Never

.contextlib: Never

.io: Never

.os: Never

.re: Never

.socket: Never

.struct: Never

.sys: Never

.tempfile: Never

.warnings: Never

.zipfile: Never

.___v_desugar_1: Never
.OrderedDict: Never
.___v_desugar_2 = pyimport "__init__"
.__init__ = pyimport "__init__"
.make_headers: (keep_alive: NoneType or Bool := NoneType or Bool, accept_encoding: NoneType or Str or Bool or global::List!(Str, _: Nat) := NoneType or Str or Bool or global::List!(Str, _: Nat), user_agent: NoneType or Str := NoneType or Str, basic_auth: NoneType or Str := NoneType or Str, proxy_basic_auth: NoneType or Str := NoneType or Str, disable_cache: NoneType or Bool := NoneType or Bool) -> global::Dict!({Str: Str})
.parse_url: (url: Str) -> util.url.Url
.___v_desugar_3 = pyimport "__init__"

.certs: Never
.___v_desugar_4 = pyimport "__version__"
.__version__ = pyimport "__version__"
.__version__: {"2.32.4"}
.___v_desugar_5 = pyimport "_internal_utils"
._internal_utils = pyimport "_internal_utils"
._HEADER_VALIDATORS_BYTE: global::Tuple([Never, Never])
._HEADER_VALIDATORS_STR: global::Tuple([Never, Never])
.HEADER_VALIDATORS: Never
.to_native_string: (string: global::Bytes, encoding: Str := Str) -> Str
.___v_desugar_6 = pyimport "compat"
.compat = pyimport "compat"
.Mapping: Never
.basestring: global::Tuple([{Str}, {global::Bytes}])
.Bytes: {global::Bytes}
.getproxies: Never
.getproxies_environment: Never
.integer_types: global::Tuple([{Int}])
.is_urllib3_1: Bool
.___v_desugar_7 = pyimport "compat"

._parse_list_header: Never
.___v_desugar_8 = pyimport "compat"

.proxy_bypass: Never
.proxy_bypass_environment: Never
.quote: Never
.Str: {Str}
.unquote: Never
.urlparse: Never
.urlunparse: Never
.___v_desugar_9 = pyimport "cookies"
.cookies = pyimport "cookies"
.cookiejar_from_dict: |Type_27076 <: cookies.RequestsCookieJar|(cookie_dict: Obj, cookiejar: Type_27076 := Type_27076, overwrite: Structural({.__or__ = (self: Never, Obj) -> Bool}) := {True} and Structural({.__or__ = (self: Never, Obj) -> Bool})) -> Type_27076
.___v_desugar_10 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.FileModeWarning: {exceptions.FileModeWarning}
.InvalidHeader: {exceptions.InvalidHeader}
.InvalidURL: {exceptions.InvalidURL}
.UnrewindableBodyError: {exceptions.UnrewindableBodyError}
.___v_desugar_11 = pyimport "structures"
.structures = pyimport "structures"
.CaseInsensitiveDict: {structures.CaseInsensitiveDict}
.NETRC_FILES: {Type_v_global_50611: global::Tuple([Str, Str]) | Type_v_global_50611 == (".netrc", "_netrc")}
.DEFAULT_CA_BUNDLE_PATH: Never
.DEFAULT_PORTS: Never
.DEFAULT_ACCEPT_ENCODING: Never

.proxy_bypass_registry: |Type_34486 <: Structural({.__contains__ = (self: Never, ?R) -> Bool and (self: Never, ?R) -> Bool}), R: Type|(host: Type_34486) -> {False}



.dict_to_sequence: |Type_34488: Type|(d: Type_34488) -> Type_34488
.super_len: (o: Str) -> {0}
.get_netrc_auth: (url: Obj, raise_errors: Bool := Bool) -> Never
.guess_filename: (obj: Obj) -> NoneType
.extract_zipped_paths: (path: Obj) -> Never
.atomic_open: (filename: Obj) -> Structural(global::ContextManager)
.from_key_val_list: (value: Obj) -> Never
.to_key_val_list: |T: Type|(value: global::Iterable(T)) -> global::List!(T, _: Nat)
.parse_list_header: (value: Obj) -> global::List!(global::Indexable(Obj, Never), 1)
.parse_dict_header: (value: {None}) -> global::Dict!({Structural({.__contains__ = (self: Never, Obj) -> Bool; .split = (self: Never, Obj, Obj) -> global::Indexable(Obj, {None})}): {None}})
.unquote_header_value: |V: Type|(value: V, is_filename: Obj := Obj) -> global::Indexable(Obj, V)
.dict_from_cookiejar: (cj: Obj) -> global::Dict!({Never: Never})
.add_dict_to_cookiejar: |Type_27076 <: cookies.RequestsCookieJar|(cj: Type_27076, cookie_dict: Obj) -> Type_27076
.get_encodings_from_content: (content: Obj) -> Never
._parse_content_type_header: (header: Str) -> global::Tuple([Str, global::Dict!({Str: Bool})])
.get_encoding_from_headers: (headers: global::List(NoneType, _: Nat) or global::GenericDict) -> NoneType
.stream_decode_response_unicode: |Type_34526 <: Structural({.encoding = ?35690 and ?35693}), Type_35693: Type, Type_35690: Type, T: Type|(iterator: global::Iterable(T), r: Type_34526) -> NoneType or T
.iter_slices: |Type_34528 <: Structural({.__len__ = (self: Never) -> Nat})|(string: Type_34528, slice_length: Nat) -> NoneType
.get_unicode_from_response: |Type_34531 <: Structural({.content = ?35740 and ?35754; .headers = ?35734}), Type_35734 <: global::GenericDict or global::List(NoneType, ?N), Type_35740: Type, Type_35754: Type, N: Nat|(r: Type_34531) -> Never
.UNRESERVED_SET: Never
.unquote_unreserved: (uri: Str) -> Str
.requote_uri: (uri: Str) -> Never
.address_in_network: (ip: Obj, net: Str) -> Bool
.dotted_netmask: (mask: Int) -> Never
.is_ipv4_address: (string_ip: Obj) -> {True}
.is_valid_cidr: (string_network: Str) -> {True}
.set_environ: (env_name: Obj, value: Obj) -> Never
.should_bypass_proxies: (url: Obj, no_proxy: Never) -> {False}
.get_environ_proxies: (url: Obj, no_proxy: Never := Never) -> Never
.select_proxy: |O <: Structural({.__or__ = (self: Never, ?R) -> ?O; .__contains__ = (self: Never, ?R) -> Bool}), R: Type, O: Type|(url: Obj, proxies: O) -> {None}
.resolve_proxies: |Type_34550: Type, Type_34560 <: Structural({.url = ?Type_34550})|(request: Type_34560, proxies: Obj, trust_env: Structural({.__and__ = (self: Never, Bool) -> Bool}) := {True} and Structural({.__and__ = (self: Never, Bool) -> Bool})) -> Never
.default_user_agent: (name: Obj := Obj) -> Str
.default_headers: () -> structures.CaseInsensitiveDict
.parse_header_links: |V: Type, V :> Str, V <: Structural({.strip = (self: Obj, ?36409) -> ?V}), Type_36409: Type|(value: V) -> global::List!(global::Dict!({{"url"}: Str}), 1)
._null: global::Bytes
._null2: Never
._null3: Never
.guess_json_utf: (data: global::Indexable(Obj, Never)) -> {None}
.prepend_scheme_if_needed: (url: Str, new_scheme: {None}) -> Never
.get_auth_from_url: (url: Obj) -> global::Tuple([Never, Never])
.check_header_validity: (header: global::Indexable(Obj, Never)) -> NoneType
._validate_header_part: |V: Type|(header: global::Indexable(Obj, V), header_part: V, header_validator_index: Obj) -> NoneType
.urldefragauth: (url: Obj) -> Never
.rewind_body: |Type_34587 <: Structural({._body_position = ?36974 and ?36977; .body = ?36970}), Type_36977: Type, Type_36974: Type, Type_36970: Type|(prepared_request: Type_34587) -> NoneType
