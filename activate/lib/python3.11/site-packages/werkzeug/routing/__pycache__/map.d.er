##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/werkzeug/routing/map.py 1753141474 36515
.___v_desugar_1: Never
.annotations: Never
.t: Never

.warnings: Never

.___v_desugar_2: Never
.pformat: Never
.___v_desugar_3: Never
.Lock: Never
.___v_desugar_4: Never
.quote: Never
.___v_desugar_5: Never
.urljoin: Never
.___v_desugar_6: Never
.urlunsplit: Never
.___v_desugar_7: Never
._get_environ: Never
.___v_desugar_8: Never
._wsgi_decoding_dance: Never
.___v_desugar_9: Never
.ImmutableDict: Never
.___v_desugar_10: Never
.MultiDict: Never
.___v_desugar_11 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.BadHost: Never
.___v_desugar_12 = pyimport "exceptions"

.HTTPException: Never
.___v_desugar_13 = pyimport "exceptions"

.MethodNotAllowed: Never
.___v_desugar_14 = pyimport "exceptions"

.NotFound: Never
.___v_desugar_15: Never
._urlencode: Never
.___v_desugar_16: Never
.get_host: Never
.___v_desugar_17 = pyimport "converters"
.converters = pyimport "converters"
.DEFAULT_CONVERTERS: Never
.___v_desugar_18 = pyimport "exceptions"

.BuildError: Never
.___v_desugar_19 = pyimport "exceptions"

.NoMatch: Never
.___v_desugar_20 = pyimport "exceptions"

.RequestAliasRedirect: Never
.___v_desugar_21 = pyimport "exceptions"

.RequestPath: Never
.___v_desugar_22 = pyimport "exceptions"

.RequestRedirect: Never
.___v_desugar_23 = pyimport "exceptions"

.WebsocketMismatch: Never
.___v_desugar_24 = pyimport "matcher"
.matcher = pyimport "matcher"
.StateMachineMatcher: Never
.___v_desugar_25 = pyimport "rules"
.rules = pyimport "rules"
._simple_rule_re: Never
.___v_desugar_26 = pyimport "rules"

.Rule: Never

.___v_desugar_27: Never
.WSGIApplication: Never
.___v_desugar_28: Never
.WSGIEnvironment: Never
.___v_desugar_29: Never
.Request: Never
.___v_desugar_30 = pyimport "converters"

.BaseConverter: {converters.BaseConverter}
.___v_desugar_31 = pyimport "rules"

.RuleFactory: {rules.RuleFactory}


.Map: ClassType
.Map._rules_by_endpoint: global::Dict!({Never: global::List!(Never, _: Nat)})
.Map.sort_parameters: Bool
.Map.default_subdomain: Str
.Map.strict_slashes: Bool
.Map.converters: Never
.Map._matcher: Never
.Map._remap_lock: Never
.Map.redirect_defaults: Bool
.Map._remap: Never
.Map.sort_key: Never
.Map.host_matching: Bool
.Map.__call__: (rules: Obj := Obj, default_subdomain: Str := Str, strict_slashes: Bool := Bool, merge_slashes: Bool := Bool, redirect_defaults: Bool := Bool, converters: Obj := Obj, sort_parameters: Bool := Bool, sort_key: Obj := Obj, host_matching: Bool := Bool) -> map.Map
.Map.default_converters: Never
.Map.lock_class: Never
.Map.merge_slashes : (self: map.Map) -> Bool
.Map.merge_slashes: Bool
.Map.merge_slashes: (self: map.Map, value: Bool) -> NoneType
.Map.is_endpoint_expecting: (self: map.Map, endpoint: Obj, *arguments: Str) -> Bool
.Map._rules : Never
.Map._rules: Never
.Map.iter_rules: (self: map.Map, endpoint: Obj := Obj) -> global::ListIterator(Never)
.Map.add: (self: map.Map, rulefactory: Obj) -> NoneType
.Map.bind: (self: map.Map, server_name: Str, script_name: NoneType or Str := NoneType or Str, subdomain: NoneType or Str := NoneType or Str, url_scheme: Str := Str, default_method: Str := Str, path_info: NoneType or Str := NoneType or Str, query_args: Obj := Obj) -> Never
.Map.bind_to_environ: (self: map.Map, environ: Obj, server_name: NoneType or Str := NoneType or Str, subdomain: NoneType or Str := NoneType or Str) -> Never
.Map.update: (self: map.Map) -> NoneType
.Map.__repr__: (self: map.Map) -> Str

.MapAdapter: ClassType
.MapAdapter.script_name: Str
.MapAdapter.path_info: Str
.MapAdapter.default_method: Str
.MapAdapter.query_args: Never
map = pyimport "map"
.MapAdapter.map: .Map
.MapAdapter.server_name: Str
.MapAdapter.url_scheme: Str
.MapAdapter.websocket: Never
.MapAdapter.subdomain: NoneType or Str
.MapAdapter.__call__: (map: map.Map, server_name: Str, script_name: Str, subdomain: NoneType or Str, url_scheme: Str, path_info: Str, default_method: Str, query_args: Obj := Obj) -> map.MapAdapter
.MapAdapter.dispatch: (self: map.MapAdapter, view_func: (Obj, Obj) -> Never, path_info: NoneType or Str := {None} and NoneType or Str, method: NoneType or Str := {None} and NoneType or Str, catch_http_exceptions: Bool := {False} and Bool) -> Never
.MapAdapter.match: |Type_35516 :> {False}|(self: map.MapAdapter, path_info: NoneType or Str := NoneType or Str, method: NoneType or Str := NoneType or Str, return_rule: Type_35516 := Type_35516 and Type_35516, query_args: Obj := {None}, websocket: NoneType or Bool := {None} and NoneType or Bool) -> global::Tuple([Never, Never])
.MapAdapter.match: (self: map.MapAdapter, path_info: NoneType or Str := NoneType or Str, method: NoneType or Str := NoneType or Str, return_rule: Obj := Obj, query_args: Obj := Obj, websocket: NoneType or Bool := NoneType or Bool) -> global::Tuple([Never, Never])
.MapAdapter.match: (self: map.MapAdapter, path_info: NoneType or Str := NoneType or Str, method: NoneType or Str := NoneType or Str, return_rule: Bool := Bool, query_args: NoneType or Str := NoneType or Str, websocket: NoneType or Bool := NoneType or Bool) -> global::Tuple([Never, Never])
.MapAdapter.test: (self: map.MapAdapter, path_info: NoneType or Str := NoneType or Str, method: NoneType or Str := NoneType or Str) -> Bool
.MapAdapter.allowed_methods: (self: map.MapAdapter, path_info: NoneType or Str := NoneType or Str) -> global::List!(Never, 0)
.MapAdapter.get_host: (self: map.MapAdapter, domain_part: NoneType or Str) -> Str
.MapAdapter.get_default_redirect: (self: map.MapAdapter, rule: Obj, method: Str, values: map.Map, query_args: NoneType or Str) -> NoneType or Str
.MapAdapter.encode_query_args: (self: map.MapAdapter, query_args: Str) -> Str
.MapAdapter.make_redirect_url: (self: map.MapAdapter, path_info: Str, query_args: NoneType or Str := NoneType or Str, domain_part: NoneType or Str := NoneType or Str) -> Str
.MapAdapter.make_alias_redirect_url: (self: map.MapAdapter, path: Str, endpoint: Obj, values: Obj, method: Str, query_args: Str) -> Str
.MapAdapter._partial_build: (self: map.MapAdapter, endpoint: Obj, values: Obj, method: NoneType or Str, append_unknown: Bool) -> NoneType or global::Tuple([Str, Str, Bool])
.MapAdapter.build: (self: map.MapAdapter, endpoint: Obj, values: Obj := Obj, method: NoneType or Str := NoneType or Str, force_external: Bool := Bool, append_unknown: Bool := Bool, url_scheme: NoneType or Str := {None} and NoneType or Str) -> Str

