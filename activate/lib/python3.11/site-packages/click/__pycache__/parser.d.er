##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/click/parser.py 1753141474 18979

.___v_desugar_1: Never
.annotations: Never
.cabc: Never

.t: Never

.___v_desugar_2: Never
.deque: Never
.___v_desugar_3: Never
._: Never
.___v_desugar_4: Never
.ngettext: Never
.___v_desugar_5 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.BadArgumentUsage: {exceptions.BadArgumentUsage}
.___v_desugar_6 = pyimport "exceptions"

.BadOptionUsage: {exceptions.BadOptionUsage}
.___v_desugar_7 = pyimport "exceptions"

.NoSuchOption: {exceptions.NoSuchOption}
.___v_desugar_8 = pyimport "exceptions"

.UsageError: {exceptions.UsageError}

.___v_desugar_9 = pyimport "core"
.core = pyimport "core"
.CoreArgument: {core.Argument}
.___v_desugar_10 = pyimport "core"

.Context: {core.Context}
.___v_desugar_11 = pyimport "core"

.CoreOption: {core.Option}
.___v_desugar_12 = pyimport "core"

.CoreParameter: {core.Parameter}


.V: Never
._flag_needs_value: Obj
._unpack_args: (args: Obj, nargs_spec: Obj) -> global::Tuple([global::Tuple([NoneType or global::HomogenousTuple(NoneType or Str) or Str]), global::List!(Str, _: Nat)])
._split_opt: (opt: Str) -> global::Tuple([Str, Str])
._normalize_opt: (opt: Str, ctx: core.Context or NoneType) -> Str
.Type__Option: ClassType
.Type__Option.dest: NoneType or Str
.Type__Option.const: Never
.Type__Option.action: NoneType or Str
.Type__Option.prefixes: Never
.Type__Option._short_opts: Never
.Type__Option._long_opts: Never
.Type__Option.nargs: Int
.Type__Option.obj: core.Option
.Type__Option.__call__: (obj: core.Option, opts: Obj, dest: NoneType or Str, action: NoneType or Str := NoneType or Str, nargs: Int := Int, const: Obj := Obj) -> parser.Type__Option
.Type__Option.takes_value : (self: parser.Type__Option) -> Bool
.Type__Option.takes_value: Bool
.Type__Option.process: (self: parser.Type__Option, value: Obj, state: Obj) -> NoneType

.Type__Argument: ClassType
.Type__Argument.dest: NoneType or Str
.Type__Argument.nargs: Int
.Type__Argument.obj: core.Argument
.Type__Argument.__call__: (obj: core.Argument, dest: NoneType or Str, nargs: Int := Int) -> parser.Type__Argument
.Type__Argument.process: (self: parser.Type__Argument, value: Obj, state: Obj) -> NoneType

._ParsingState: ClassType

.Type__OptionParser: ClassType
.Type__OptionParser.ctx: core.Context or NoneType
.Type__OptionParser._long_opt: global::Dict!({Str: Never})
.Type__OptionParser._short_opt: global::Dict!({Str: Never})
.Type__OptionParser.ignore_unknown_options: Bool
.Type__OptionParser.allow_interspersed_args: Bool
.Type__OptionParser._args: global::List!(Never, _: Nat)
.Type__OptionParser._opt_prefixes: Never
.Type__OptionParser.__call__: (ctx: core.Context or NoneType := core.Context or NoneType) -> parser.Type__OptionParser
.Type__OptionParser.add_option: (self: parser.Type__OptionParser, obj: core.Option, opts: global::Iterable(Str), dest: NoneType or Str, action: NoneType or Str := NoneType or Str, nargs: Int := Int, const: Obj := Obj) -> NoneType
.Type__OptionParser.add_argument: (self: parser.Type__OptionParser, obj: core.Argument, dest: NoneType or Str, nargs: Int := Int) -> NoneType
.Type__OptionParser.parse_args: Never
.Type__OptionParser._process_args_for_args: (self: parser.Type__OptionParser, state: Obj) -> NoneType
.Type__OptionParser._process_args_for_options: (self: parser.Type__OptionParser, state: Obj) -> NoneType
.Type__OptionParser._match_long_opt: (self: parser.Type__OptionParser, opt: Str, explicit_value: NoneType or Str, state: Obj) -> NoneType
.Type__OptionParser._match_short_opt: (self: parser.Type__OptionParser, arg: Str, state: Obj) -> NoneType
.Type__OptionParser._get_value_from_state: (self: parser.Type__OptionParser, option_name: Str, option: Obj, state: Obj) -> Never
.Type__OptionParser._process_opts: (self: parser.Type__OptionParser, arg: Str, state: Obj) -> NoneType

.__getattr__: (name: Str) -> Obj
