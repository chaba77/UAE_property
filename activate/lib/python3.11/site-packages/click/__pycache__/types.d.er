##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/click/types.py 1753141474 38389
.___v_desugar_1: Never
.annotations: Never
.cabc: Never

.enum: Never

.os: Never

.stat: Never

.sys: Never

.t: Never

.___v_desugar_2: Never
.datetime: Never
.___v_desugar_3: Never
._: Never
.___v_desugar_4: Never
.ngettext: Never
.___v_desugar_5 = pyimport "_compat"
._compat = pyimport "_compat"
._get_argv_encoding: () -> Str
.___v_desugar_6 = pyimport "_compat"

.open_stream: (filename: Obj, mode: Str := Str, encoding: NoneType or Str := NoneType or Str, errors: NoneType or Str := NoneType or Str, atomic: Bool := Bool) -> global::Tuple([Never, Bool])
.___v_desugar_7 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.BadParameter: Never
.___v_desugar_8 = pyimport "utils"
.utils = pyimport "utils"
.format_filename: (filename: global::Bytes or Str, shorten: Bool := Bool and Bool) -> Str
.___v_desugar_9 = pyimport "utils"

.LazyFile: Never
.___v_desugar_10 = pyimport "utils"

.safecall: (func: () -> Never) -> Never

.te = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"

.___v_desugar_11 = pyimport "core"
.core = pyimport "core"
.Context: {core.Context}
.___v_desugar_12 = pyimport "core"

.Parameter: {core.Parameter}
.___v_desugar_13 = pyimport "shell_completion"
.shell_completion = pyimport "shell_completion"
.CompletionItem: Never


.ParamTypeValue: Never
.ParamType: ClassType
.ParamType.name: Str
.ParamType.__call__: (self: Obj, value: Obj, param: core.Parameter or NoneType := core.Parameter or NoneType, ctx: core.Context or NoneType := core.Context or NoneType) -> Never
.ParamType.is_composite: Never
.ParamType.arity: Never
.ParamType.envvar_list_splitter: Never
.ParamType.to_info_dict: Never
.ParamType.__call__: (self: Obj, value: Obj, param: core.Parameter or NoneType := core.Parameter or NoneType, ctx: core.Context or NoneType := core.Context or NoneType) -> Never
.ParamType.get_metavar: (self: types.ParamType, param: core.Parameter, ctx: core.Context) -> NoneType or Str
.ParamType.get_missing_message: (self: types.ParamType, param: core.Parameter, ctx: core.Context or NoneType) -> NoneType or Str
.ParamType.convert: (self: types.ParamType, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.ParamType.split_envvar_value: (self: types.ParamType, rv: Str) -> Never
.ParamType.fail: (self: types.ParamType, message: Str, param: core.Parameter or NoneType := core.Parameter or NoneType, ctx: core.Context or NoneType := core.Context or NoneType) -> Never
.ParamType.shell_complete: Never

.CompositeParamType: ClassType
types = pyimport "types"
.CompositeParamType <: .ParamType
.CompositeParamType.is_composite: {True}
.CompositeParamType.arity : (self: types.CompositeParamType) -> Int
.CompositeParamType.arity: Never

.FuncParamType: ClassType
.FuncParamType <: .ParamType
.FuncParamType.func: Never
.FuncParamType.name: Str
.FuncParamType.__call__: (func: Obj) -> types.FuncParamType
.FuncParamType.to_info_dict: Never
.FuncParamType.convert: (self: types.FuncParamType, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never

.UnprocessedParamType: ClassType
.UnprocessedParamType <: .ParamType
.UnprocessedParamType.name: {"text"}
.UnprocessedParamType.convert: (self: types.UnprocessedParamType, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.UnprocessedParamType.__repr__: (self: types.UnprocessedParamType) -> Str

.StringParamType: ClassType
.StringParamType <: .ParamType
.StringParamType.name: {"text"}
.StringParamType.convert: (self: types.StringParamType, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.StringParamType.__repr__: (self: types.StringParamType) -> Str

.Choice: ClassType
.Choice <: .ParamType
.Choice.choices: Never
.Choice.case_sensitive: Bool
.Choice.__call__: (choices: Obj, case_sensitive: Bool := Bool) -> types.Choice
.Choice.name: {"choice"}
.Choice.to_info_dict: Never
.Choice._normalized_mapping: (self: types.Choice, ctx: core.Context or NoneType := core.Context or NoneType) -> global::Dict!({Never: Never})
.Choice.normalize_choice: (self: types.Choice, choice: Obj, ctx: core.Context or NoneType) -> Str
.Choice.get_metavar: (self: types.Choice, param: core.Parameter, ctx: core.Context) -> NoneType or Str
.Choice.get_missing_message: (self: types.Choice, param: core.Parameter, ctx: core.Context or NoneType) -> Str
.Choice.convert: (self: types.Choice, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.Choice.get_invalid_choice_message: (self: types.Choice, value: Obj, ctx: core.Context or NoneType) -> Str
.Choice.__repr__: (self: types.Choice) -> Str
.Choice.shell_complete: Never

.DateTime: ClassType
.DateTime <: .ParamType
.DateTime.formats: Never
.DateTime.__call__: (formats: Obj := Obj) -> types.DateTime
.DateTime.name: {"datetime"}
.DateTime.to_info_dict: Never
.DateTime.get_metavar: (self: types.DateTime, param: core.Parameter, ctx: core.Context) -> NoneType or Str
.DateTime._try_to_convert_date: (self: types.DateTime, value: Obj, format: Str) -> Never
.DateTime.convert: (self: types.DateTime, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.DateTime.__repr__: (self: types.DateTime) -> Str

.Type__NumberParamTypeBase: ClassType
.Type__NumberParamTypeBase <: .ParamType
.Type__NumberParamTypeBase._number_class: Never
.Type__NumberParamTypeBase.convert: (self: types.Type__NumberParamTypeBase, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never

.Type__NumberRangeBase: ClassType
.Type__NumberRangeBase <: .Type__NumberParamTypeBase
.Type__NumberRangeBase.max: Float or NoneType
.Type__NumberRangeBase.min: Float or NoneType
.Type__NumberRangeBase.clamp: Bool
.Type__NumberRangeBase.max_open: Bool
.Type__NumberRangeBase.min_open: Bool
.Type__NumberRangeBase.__call__: (min: Float or NoneType := Float or NoneType, max: Float or NoneType := Float or NoneType, min_open: Bool := Bool, max_open: Bool := Bool, clamp: Bool := Bool) -> types.Type__NumberRangeBase
.Type__NumberRangeBase.to_info_dict: Never
.Type__NumberRangeBase.convert: (self: types.Type__NumberRangeBase, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.Type__NumberRangeBase._clamp: (self: types.Type__NumberRangeBase, bound: Float, dir: Obj, open: Bool) -> Float
.Type__NumberRangeBase._describe_range: (self: types.Type__NumberRangeBase) -> Str
.Type__NumberRangeBase.__repr__: (self: types.Type__NumberRangeBase) -> Str

.IntParamType: ClassType
.IntParamType <: .Type__NumberParamTypeBase
.IntParamType.name: {"integer"}
.IntParamType._number_class: {Int}
.IntParamType.__repr__: (self: types.IntParamType) -> Str

.IntRange: ClassType
.IntRange <: .Type__NumberRangeBase
.IntRange.name: {"integer range"}
.IntRange._clamp: (self: types.IntRange, bound: Int, dir: Int, open: Bool) -> Int

.FloatParamType: ClassType
.FloatParamType <: .Type__NumberParamTypeBase
.FloatParamType.name: {"float"}
.FloatParamType._number_class: {Float}
.FloatParamType.__repr__: (self: types.FloatParamType) -> Str

.FloatRange: ClassType
.FloatRange <: .Type__NumberRangeBase
.FloatRange.__call__: (min: Float or NoneType := Float or NoneType, max: Float or NoneType := Float or NoneType, min_open: Bool := Bool, max_open: Bool := Bool, clamp: Bool := Bool) -> types.FloatRange
.FloatRange.name: {"float range"}
.FloatRange._clamp: (self: types.FloatRange, bound: Float, dir: Obj, open: Bool) -> Float

.BoolParamType: ClassType
.BoolParamType <: .ParamType
.BoolParamType.name: {"boolean"}
.BoolParamType.convert: (self: types.BoolParamType, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.BoolParamType.__repr__: (self: types.BoolParamType) -> Str

.UUIDParameterType: ClassType
.UUIDParameterType <: .ParamType
.UUIDParameterType.name: {"uuid"}
.UUIDParameterType.convert: (self: types.UUIDParameterType, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.UUIDParameterType.__repr__: (self: types.UUIDParameterType) -> Str

.File: ClassType
.File <: .ParamType
.File.mode: Str
.File.encoding: NoneType or Str
.File.atomic: Bool
.File.lazy: NoneType or Bool
.File.errors: NoneType or Str
.File.__call__: (mode: Str := Str, encoding: NoneType or Str := NoneType or Str, errors: NoneType or Str := NoneType or Str, lazy: NoneType or Bool := NoneType or Bool, atomic: Bool := Bool) -> types.File
.File.name: {"filename"}
.File.envvar_list_splitter: Never
.File.to_info_dict: Never
.File.resolve_lazy_flag: (self: types.File, value: Obj) -> Bool
.File.convert: (self: types.File, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never
.File.shell_complete: Never

._is_file_like: (value: Obj) -> {value in Structural({.write = Obj} or {.read = Obj})}
.Path: ClassType
.Path <: .ParamType
.Path.writable: Bool
.Path.allow_dash: Bool
.Path.file_okay: Bool
.Path.dir_okay: Bool
.Path.readable: Bool
.Path.executable: Bool
.Path.resolve_path: Bool
.Path.exists: Bool
.Path.type: Never
.Path.__call__: (exists: Bool := Bool, file_okay: Bool := Bool, dir_okay: Bool := Bool, writable: Bool := Bool, readable: Bool := Bool, resolve_path: Bool := Bool, allow_dash: Bool := Bool, path_type: Obj := Obj, executable: Bool := Bool) -> types.Path
.Path.envvar_list_splitter: Never
.Path.to_info_dict: Never
.Path.coerce_path_result: (self: types.Path, value: global::Bytes or Str) -> global::Bytes or Str
.Path.convert: (self: types.Path, value: global::Bytes or Str, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> global::Bytes or Str
.Path.shell_complete: Never

.Tuple: ClassType
.Tuple <: .CompositeParamType
.Tuple.types: Never
.Tuple.__call__: (types: Obj) -> types.Tuple
.Tuple.to_info_dict: Never
.Tuple.name : (self: types.Tuple) -> Str
.Tuple.name: Str
.Tuple.arity : (self: types.Tuple) -> Int
.Tuple.arity: Int
.Tuple.convert: (self: types.Tuple, value: Obj, param: core.Parameter or NoneType, ctx: core.Context or NoneType) -> Never

.convert_type: (ty: Obj, default: Obj := Obj) -> types.ParamType
.UNPROCESSED: Never
.STRING: Never
.INT: Never
.FLOAT: Never
.BOOL: Never
.UUID: Never
.OptionHelpExtra: ClassType
.OptionHelpExtra <: Never
.OptionHelpExtra.range: Str
.OptionHelpExtra.default: Str
.OptionHelpExtra.envvars: Never
.OptionHelpExtra.required: Str

