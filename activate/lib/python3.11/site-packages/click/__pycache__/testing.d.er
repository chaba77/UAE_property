##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/click/testing.py 1753141474 18702
.___v_desugar_1: Never
.annotations: Never
.cabc: Never

.contextlib: Never

.io: Never

.os: Never

.shlex: Never

.shutil: Never

.sys: Never

.tempfile: Never

.t: Never

.___v_desugar_2 = pyimport "types"
.types = pyimport "types"
.TracebackType: Never
.___v_desugar_3 = pyimport "__init__"
.__init__ = pyimport "__init__"
._compat: Never
.___v_desugar_4 = pyimport "__init__"

.formatting: Never
.___v_desugar_5 = pyimport "__init__"

.termui: Never
.___v_desugar_6 = pyimport "__init__"

.utils: Never
.___v_desugar_7 = pyimport "_compat"
._compat = pyimport "_compat"
._find_binary_reader: (stream: global::Readable!) -> Never

.___v_desugar_8: Never
.ReadableBuffer: Never
.___v_desugar_9 = pyimport "core"
.core = pyimport "core"
.Command: {core.Command}


.EchoingStdin: ClassType
.EchoingStdin._input: Never
.EchoingStdin._output: Never
.EchoingStdin._paused: Never
.EchoingStdin.__call__: (input: Obj, output: Obj) -> click.testing.EchoingStdin
.EchoingStdin.__getattr__: (self: click.testing.EchoingStdin, x: Str) -> Never
.EchoingStdin._echo: (self: click.testing.EchoingStdin, rv: global::Bytes) -> global::Bytes
.EchoingStdin.read: (self: click.testing.EchoingStdin, n: Int := Int) -> global::Bytes
.EchoingStdin.read1: (self: click.testing.EchoingStdin, n: Int := Int) -> global::Bytes
.EchoingStdin.readline: (self: click.testing.EchoingStdin, n: Int := Int) -> global::Bytes
.EchoingStdin.readlines: (self: click.testing.EchoingStdin) -> global::List!(global::Bytes, _: Nat)
.EchoingStdin.__iter__: |I <: global::Iterable(?T), T: Type|(self: click.testing.EchoingStdin) -> ?I.Iterator
.EchoingStdin.__repr__: (self: click.testing.EchoingStdin) -> Str

._pause_echo: (stream: NoneType or click.testing.EchoingStdin) -> NoneType
.BytesIOCopy: ClassType
.BytesIOCopy <: Never
.BytesIOCopy.copy_to: Never
.BytesIOCopy.__call__: (copy_to: Obj) -> click.testing.BytesIOCopy
.BytesIOCopy.flush: (self: click.testing.BytesIOCopy) -> NoneType
.BytesIOCopy.write: (self: click.testing.BytesIOCopy, b: Obj) -> Int

.StreamMixer: ClassType
.StreamMixer.stdout: Never
.StreamMixer.output: Never
.StreamMixer.stderr: Never
.StreamMixer.__call__: () -> click.testing.StreamMixer

.Type__NamedTextIOWrapper: ClassType
.Type__NamedTextIOWrapper <: Never
.Type__NamedTextIOWrapper._mode: Never
.Type__NamedTextIOWrapper._name: Never
.Type__NamedTextIOWrapper.__call__: (buffer: Obj, name: Str, mode: Str, **kwargs := Obj) -> click.testing.Type__NamedTextIOWrapper
.Type__NamedTextIOWrapper.name : (self: click.testing.Type__NamedTextIOWrapper) -> Str
.Type__NamedTextIOWrapper.name: Str
.Type__NamedTextIOWrapper.mode : (self: click.testing.Type__NamedTextIOWrapper) -> Str
.Type__NamedTextIOWrapper.mode: Str
.Type__NamedTextIOWrapper.__next__: (self: click.testing.Type__NamedTextIOWrapper) -> Str

.make_input_stream: (input: NoneType or global::Bytes or Str, charset: Str) -> Never
.Result: ClassType
.Result.stdout_bytes: global::Bytes
.Result.return_value: Never
.Result.exception: global::BaseException or NoneType
.Result.exit_code: Int
.Result.output_bytes: global::Bytes
.Result.stderr_bytes: global::Bytes
.Result.exc_info: Never
.Result.runner: Never
.Result.__call__: (runner: Obj, stdout_bytes: global::Bytes, stderr_bytes: global::Bytes, output_bytes: global::Bytes, return_value: Obj, exit_code: Int, exception: global::BaseException or NoneType, exc_info: NoneType or global::Tuple([Never, global::BaseException, Obj]) := NoneType or global::Tuple([Never, global::BaseException, Obj])) -> click.testing.Result
.Result.output : (self: click.testing.Result) -> Str
.Result.output: Str
.Result.stdout : (self: click.testing.Result) -> Str
.Result.stdout: Str
.Result.stderr : (self: click.testing.Result) -> Str
.Result.stderr: Str
.Result.__repr__: (self: click.testing.Result) -> Str

.CliRunner: ClassType
.CliRunner.charset: Str
.CliRunner.catch_exceptions: Bool
.CliRunner.echo_stdin: Bool
.CliRunner.env: Never
.CliRunner.__call__: (charset: Str := Str, env: Obj := Obj, echo_stdin: Bool := Bool, catch_exceptions: Bool := Bool) -> click.testing.CliRunner
.CliRunner.get_default_prog_name: (self: click.testing.CliRunner, cli: Obj) -> Str
.CliRunner.make_env: (self: click.testing.CliRunner, overrides: NoneType := NoneType) -> global::Dict({Never: Never})
.CliRunner.isolation: (self: click.testing.CliRunner, input: NoneType or global::Bytes or Str := NoneType or global::Bytes or Str, env: NoneType or global::Dict({Never: Never}) := NoneType or global::Dict({Never: Never}), color: Bool := Bool) -> Never
.CliRunner.invoke: (self: click.testing.CliRunner, cli: Obj, args: NoneType or Str := NoneType or Str, input: NoneType or global::Bytes or Str := NoneType or global::Bytes or Str, env: NoneType or global::Dict({Never: Never}) := NoneType or global::Dict({Never: Never}), catch_exceptions: NoneType or Bool := NoneType or Bool, color: Bool := Bool, **extra := Obj) -> click.testing.Result
.CliRunner.isolated_filesystem: (self: click.testing.CliRunner, temp_dir: Obj := Obj) -> Never

