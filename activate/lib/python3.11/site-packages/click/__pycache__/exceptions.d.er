##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/click/exceptions.py 1753141474 9891
.___v_desugar_1: Never
.annotations: Never
.cabc: Never

.t: Never

.___v_desugar_2: Never
._: Never
.___v_desugar_3: Never
.ngettext: Never
.___v_desugar_4 = pyimport "_compat"
._compat = pyimport "_compat"
.get_text_stderr: (encoding: NoneType or Str := NoneType or Str, errors: NoneType or Str := NoneType or Str) -> Never
.___v_desugar_5 = pyimport "globals"
.globals = pyimport "globals"
.resolve_color_default: (color: NoneType or Bool := NoneType or Bool) -> NoneType or Bool
.___v_desugar_6 = pyimport "utils"
.utils = pyimport "utils"
.echo: (message: Obj := Obj, file: NoneType := NoneType, nl: Bool := Bool, err: Bool := Bool, color: NoneType or Bool := NoneType or Bool) -> NoneType
.___v_desugar_7 = pyimport "utils"

.format_filename: (filename: global::Bytes or Str, shorten: Bool := Bool and Bool) -> Str

.___v_desugar_8 = pyimport "core"
.core = pyimport "core"
.Command: {core.Command}
.___v_desugar_9 = pyimport "core"

.Context: {core.Context}
.___v_desugar_10 = pyimport "core"

.Parameter: {core.Parameter}


._join_param_hints: (param_hint: Obj) -> NoneType or Str
.ClickException: ClassType
.ClickException <: global::Exception
.ClickException.message: Str
.ClickException.show_color: NoneType or Bool
.ClickException.__call__: (message: Str) -> exceptions.ClickException
.ClickException.exit_code: {1}
.ClickException.format_message: (self: exceptions.ClickException) -> Str
.ClickException.__str__: (self: exceptions.ClickException) -> Str
.ClickException.show: (self: exceptions.ClickException, file: NoneType := NoneType) -> NoneType

.UsageError: ClassType
exceptions = pyimport "exceptions"
.UsageError <: .ClickException
.UsageError.ctx: core.Context or NoneType
.UsageError.cmd: NoneType or core.Command
.UsageError.__call__: (message: Str, ctx: core.Context or NoneType := core.Context or NoneType) -> exceptions.UsageError
.UsageError.exit_code: {2}
.UsageError.show: (self: exceptions.UsageError, file: NoneType := NoneType) -> NoneType

.BadParameter: ClassType
.BadParameter <: .UsageError
.BadParameter.param: core.Parameter or NoneType
.BadParameter.param_hint: NoneType or Str
.BadParameter.__call__: (message: Str, ctx: core.Context or NoneType := core.Context or NoneType, param: core.Parameter or NoneType := core.Parameter or NoneType, param_hint: NoneType or Str := NoneType or Str) -> exceptions.BadParameter
.BadParameter.format_message: (self: exceptions.BadParameter) -> Str

.MissingParameter: ClassType
.MissingParameter <: .BadParameter
.MissingParameter.param_type: NoneType or Str
.MissingParameter.__call__: (message: NoneType or Str := NoneType or Str, ctx: core.Context or NoneType := core.Context or NoneType, param: core.Parameter or NoneType := core.Parameter or NoneType, param_hint: NoneType or Str := NoneType or Str, param_type: NoneType or Str := NoneType or Str) -> exceptions.MissingParameter
.MissingParameter.format_message: (self: exceptions.MissingParameter) -> Str
.MissingParameter.__str__: (self: exceptions.MissingParameter) -> Str

.NoSuchOption: ClassType
.NoSuchOption <: .UsageError
.NoSuchOption.option_name: Str
.NoSuchOption.possibilities: Never
.NoSuchOption.__call__: (option_name: Str, message: NoneType or Str := NoneType or Str, possibilities: Obj := Obj, ctx: core.Context or NoneType := core.Context or NoneType) -> exceptions.NoSuchOption
.NoSuchOption.format_message: (self: exceptions.NoSuchOption) -> Str

.BadOptionUsage: ClassType
.BadOptionUsage <: .UsageError
.BadOptionUsage.option_name: Str
.BadOptionUsage.__call__: (option_name: Str, message: Str, ctx: core.Context or NoneType := core.Context or NoneType) -> exceptions.BadOptionUsage

.BadArgumentUsage: ClassType
.BadArgumentUsage <: .UsageError

.NoArgsIsHelpError: ClassType
.NoArgsIsHelpError <: .UsageError
.NoArgsIsHelpError.__call__: (ctx: core.Context) -> exceptions.NoArgsIsHelpError
.NoArgsIsHelpError.show: (self: exceptions.NoArgsIsHelpError, file: NoneType := NoneType) -> NoneType

.FileError: ClassType
.FileError <: .ClickException
.FileError.filename: Str
.FileError.ui_filename: Str
.FileError.__call__: (filename: Str, hint: NoneType or Str := NoneType or Str) -> exceptions.FileError
.FileError.format_message: (self: exceptions.FileError) -> Str

.Abort: ClassType
.Abort <: global::RuntimeError

.Exit: ClassType
.Exit <: global::RuntimeError
.Exit.exit_code: Int
.Exit.__call__: (code: Int := Int) -> exceptions.Exit
.Exit.__slots__: global::Tuple([{"exit_code"}])

