##[pylyzer] failed /home/ether/Desktop/testingThings/realstate/activate/lib/python3.11/site-packages/bs4/dammit.py 1753451621 51472

.__license__: {"MIT"}
.___v_desugar_1: Never
.codepoint2name: Never
.___v_desugar_2: Never
.defaultdict: Never
.codecs: Never

.___v_desugar_3: Never
.html5: Never
.re: Never

.___v_desugar_4: Never
.Logger: Never
.getLogger: Never
.___v_desugar_5: Never
.GeneticModule: Never
.___v_desugar_6: Never
.Dict: Never
.Iterator: Never
.List: Never
.Optional: Never
.Pattern: Never
.Set: Never
.Tuple: Never
.Type: Never
.Union: Never
.cast: Never
.___v_desugar_7 = pyimport "typing_extensions"
.typing_extensions = pyimport "typing_extensions"
.Literal: Never
.___v_desugar_8 = pyimport "_typing"
._typing = pyimport "_typing"
._Encoding: Never
._Encodings: Never
.warnings: Never

.chardet_module: Never
.cchardet: Never


.chardet: Never


.charset_normalizer = pyimport "charset_normalizer"






._chardet_dammit: (s: global::Bytes) -> NoneType or Str
.xml_encoding: Str
.html_meta: Str
.encoding_res: global::GenericDict


.EntitySubstitution: ClassType
.EntitySubstitution <: Obj
.EntitySubstitution.CHARACTER_TO_HTML_ENTITY_WITH_AMPERSAND_RE: Never
.EntitySubstitution.CHARACTER_TO_HTML_ENTITY: Never
.EntitySubstitution.HTML_ENTITY_TO_CHARACTER: Never
.EntitySubstitution.CHARACTER_TO_HTML_ENTITY_RE: Never
.EntitySubstitution._populate_class_variables: |Type_1345: Type, Type_1347: Type, Type_1344: Type, Type_977 <: Structural({.CHARACTER_TO_HTML_ENTITY_RE = ?1346; .HTML_ENTITY_TO_CHARACTER = ?1345; .CHARACTER_TO_HTML_ENTITY_WITH_AMPERSAND_RE = ?1347; .CHARACTER_TO_HTML_ENTITY = ?1344}), Type_1346: Type|(cls: Type_977) -> NoneType
.EntitySubstitution.CHARACTER_TO_XML_ENTITY: Never
.EntitySubstitution.ANY_ENTITY_RE: Never
.EntitySubstitution.BARE_AMPERSAND_OR_BRACKET: Never
.EntitySubstitution.AMPERSAND_OR_BRACKET: Never
.EntitySubstitution._substitute_html_entity: |Type_981 <: Structural({.CHARACTER_TO_HTML_ENTITY = ?1359}), Type_1359: Type|(cls: Type_981, matchobj: Obj) -> Str
.EntitySubstitution._substitute_xml_entity: |K: Type, Type_982 <: Structural({.CHARACTER_TO_XML_ENTITY = ?Self}), Self <: global::Indexable(?K, ?V), V: Type|(cls: Type_982, matchobj: Obj) -> Str
.EntitySubstitution._escape_entity_name: (cls: Obj, matchobj: Obj) -> Str
.EntitySubstitution._escape_unrecognized_entity_name: |Type_984 <: Structural({.HTML_ENTITY_TO_CHARACTER = ?1441}), Type_1441: Type|(cls: Type_984, matchobj: Obj) -> Str
.EntitySubstitution.quoted_attribute_value: (cls: Obj, value: Str) -> Str
.EntitySubstitution.substitute_xml: |Type_1483: Type, Type_1484: Type, Type_986 <: Structural({.AMPERSAND_OR_BRACKET = ?1483; .quoted_attribute_value = (self: Obj, ?1487) -> ?1488; ._substitute_xml_entity = ?1484}), Type_1487: Type, Type_1488: Type|(cls: Type_986, value: Str, make_quoted_attribute: Bool := {False} and Bool) -> Str
.EntitySubstitution.substitute_xml_containing_entities: |Type_1508: Type, Type_1503: Type, Type_1504: Type, Type_988 <: Structural({.BARE_AMPERSAND_OR_BRACKET = ?1503; .quoted_attribute_value = (self: Obj, ?1507) -> ?1508; ._substitute_xml_entity = ?1504}), Type_1507: Type|(cls: Type_988, value: Str, make_quoted_attribute: Bool := {False} and Bool) -> Str
.EntitySubstitution.substitute_html: |Type_990 <: Structural({._substitute_html_entity = ?1523; .CHARACTER_TO_HTML_ENTITY_WITH_AMPERSAND_RE = ?1522}), Type_1522: Type, Type_1523: Type|(cls: Type_990, s: Str) -> Str
.EntitySubstitution.substitute_html5: |Type_1533: Type, Type_1530: Type, Type_1532: Type, Type_1531: Type, Type_991 <: Structural({._substitute_html_entity = ?1533; ._escape_entity_name = ?1531; .CHARACTER_TO_HTML_ENTITY_RE = ?1532; .ANY_ENTITY_RE = ?1530})|(cls: Type_991, s: Str) -> Str
.EntitySubstitution.substitute_html5_raw: |Type_1542: Type, Type_1545: Type, Type_992 <: Structural({._substitute_html_entity = ?1545; ._escape_unrecognized_entity_name = ?1543; .CHARACTER_TO_HTML_ENTITY_RE = ?1544; .ANY_ENTITY_RE = ?1542}), Type_1543: Type, Type_1544: Type|(cls: Type_992, s: Str) -> Str


.EncodingDetector: ClassType
.EncodingDetector.declared_encoding: Never
.EncodingDetector.exclude_encodings: Never
.EncodingDetector.chardet_encoding: Never
.EncodingDetector.is_html: Bool
.EncodingDetector.known_definite_encodings: Never
.EncodingDetector.markup: global::Bytes
.EncodingDetector.user_encodings: Never
.EncodingDetector.sniffed_encoding: Never
.EncodingDetector.__call__: (markup: global::Bytes, known_definite_encodings: Obj := Obj, is_html: NoneType or Bool := NoneType or Bool, exclude_encodings: Obj := Obj, user_encodings: Obj := Obj, override_encodings: Obj := Obj) -> bs4.dammit.EncodingDetector
.EncodingDetector._usable: Never
.EncodingDetector.encodings : Never
.EncodingDetector.encodings: Never
.EncodingDetector.strip_byte_order_mark: (cls: Obj, data: global::Bytes) -> global::Tuple([global::Bytes, Never])
.EncodingDetector.find_declared_encoding: (cls: Obj, markup: global::Bytes or Str, is_html: Bool := Bool and Bool, search_entire_document: Bool := Bool and Bool) -> Never

.UnicodeDammit: ClassType
.UnicodeDammit.log: Never
.UnicodeDammit.tried_encodings: Never
.UnicodeDammit.detector: Never
.UnicodeDammit.original_encoding: Never
.UnicodeDammit.contains_replacement_characters: Bool
.UnicodeDammit.is_html: Bool
.UnicodeDammit.markup: global::Bytes
.UnicodeDammit.smart_quotes_to: Never
.UnicodeDammit.unicode_markup: Never
.UnicodeDammit.__call__: (markup: global::Bytes, known_definite_encodings: Obj := Obj, smart_quotes_to: NoneType or {"html", "xml", "ascii"} := NoneType or {"html", "xml", "ascii"}, is_html: Bool := Bool, exclude_encodings: Obj := Obj, user_encodings: Obj := Obj, override_encodings: Obj := Obj) -> bs4.dammit.UnicodeDammit
.UnicodeDammit._sub_ms_char: (self: bs4.dammit.UnicodeDammit, match: Obj) -> global::Bytes
.UnicodeDammit.CHARSET_ALIASES: Never
.UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES: Never
.UnicodeDammit._convert_from: (self: bs4.dammit.UnicodeDammit, proposed: Obj, errors: Str := Str) -> NoneType or Str
.UnicodeDammit._to_unicode: (self: bs4.dammit.UnicodeDammit, data: global::Bytes, encoding: Obj, errors: Str := Str) -> Str
.UnicodeDammit.declared_html_encoding : (self: bs4.dammit.UnicodeDammit) -> Never
.UnicodeDammit.declared_html_encoding: Never
.UnicodeDammit.find_codec: (self: bs4.dammit.UnicodeDammit, charset: Obj) -> NoneType or Str
.UnicodeDammit._codec: (self: bs4.dammit.UnicodeDammit, charset: Obj) -> NoneType or Str
.UnicodeDammit.MS_CHARS: Never
.UnicodeDammit.MS_CHARS_TO_ASCII: Never
.UnicodeDammit.WINDOWS_1252_TO_UTF8: Never
.UnicodeDammit.MULTIBYTE_MARKERS_AND_SIZES: Never
.UnicodeDammit.FIRST_MULTIBYTE_MARKER: Never
.UnicodeDammit.LAST_MULTIBYTE_MARKER: Never
.UnicodeDammit.detwingle: |K: Type, T: Type, V: Type, Type_2076: Type, Self <: global::Indexable(?K, ?V), Type_1020 <: Structural({.MULTIBYTE_MARKERS_AND_SIZES = ?2009; .FIRST_MULTIBYTE_MARKER = ?R; .LAST_MULTIBYTE_MARKER = ?R; .WINDOWS_1252_TO_UTF8 = ?2076 and ?Self}), R: Type, Type_2009 <: global::Iterable(?T)|(cls: Type_1020, in_bytes: global::Bytes, main_encoding: Obj := Obj, embedded_encoding: Obj := Obj) -> global::Bytes

uctural({.__contains__ = (self: Never, R) -> Bool and (self: Never, R) -> Bool}), R <: Nat, K :> {1, 0, 2}, K :> Int, T :> global::Bytes, R :> Int, Type_1020 <: Structural({.MULTIBYTE_MARKERS_AND_SIZES = Type_2009; .FIRST_MULTIBYTE_MARKER = R; .LAST_MULTIBYTE_MARKER = R; .WINDOWS_1252_TO_UTF8 = Type_2076 and Self}), Type_2009 <: global::Iterable(Self), Self <: global::Indexable(K, R)|(cls: Type_1020, in_bytes: global::Bytes, main_encoding: Obj := Obj, embedded_encoding: Obj := Obj) -> global::Bytes

